name: Release

on:
  push:
    tags:
      - 'v*'

env:
  LLVM_VERSION: 14.0.6
  LLVM_VERSION_MAJOR: 14
  PKG_TARGET: null
  EXECUTABLE: null

jobs:
  build:
    strategy:
      matrix:
        os:
        - ubuntu-22.04
        - macos-12
        # - windows-2022
        node: [18]

    runs-on: ${{ matrix.os }}

    steps:

    # Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Set up Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node }}

    - name: Install LLVM on Linux
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo wget https://apt.llvm.org/llvm.sh
        sudo chmod +x llvm.sh
        sudo ./llvm.sh ${{ env.LLVM_VERSION_MAJOR }}
        echo "/usr/lib/llvm-${{ env.LLVM_VERSION_MAJOR }}/bin" >> $GITHUB_PATH
        echo "PKG_TARGET=node${{ matrix.node }}-linux-x64" >> "$GITHUB_ENV"
        echo "EXECUTABLE=joelang-${{ github.ref_name }}-node${{ matrix.node }}-linux-x64" >> "$GITHUB_ENV"

    - name: Install LLVM on macOS
      if: startsWith(matrix.os, 'macos')
      run: |
        brew update
        brew upgrade
        brew install llvm@${{ env.LLVM_VERSION_MAJOR }}
        echo "/usr/local/opt/llvm@${{ env.LLVM_VERSION_MAJOR }}/bin" >> $GITHUB_PATH
        echo "PKG_TARGET=node${{ matrix.node }}-macos-x64" >> "$GITHUB_ENV"
        echo "EXECUTABLE=joelang-${{ github.ref_name }}-node${{ matrix.node }}-macos-x64" >> "$GITHUB_ENV"

    - name: Install LLVM on Windows
      if: startsWith(matrix.os, 'windows')
      run: |
        $LLVM_PREBUILT_FILE = "llvm-${{ env.LLVM_VERSION }}-${{ matrix.os }}.zip"
        curl -sLO https://github.com/ApsarasX/llvm-windows/releases/download/llvmorg-${{ env.LLVM_VERSION }}/$LLVM_PREBUILT_FILE
        Expand-Archive -Path $LLVM_PREBUILT_FILE -DestinationPath .
        echo "Dir $pwd\LLVM-${{ env.LLVM_VERSION }}-win64\lib\cmake\llvm"
        dir "$pwd\LLVM-${{ env.LLVM_VERSION }}-win64\lib\cmake\llvm"
        echo "LLVM_DIR='$pwd\LLVM-${{ env.LLVM_VERSION }}-win64\lib\cmake'" >> "$GITHUB_ENV"
        echo "$pwd\LLVM-${{ env.LLVM_VERSION_MAJOR }}\bin" >> $GITHUB_PATH
        echo "PKG_TARGET=node${{ matrix.node }}-win-x64" >> "$GITHUB_ENV"
        echo "EXECUTABLE=joelang-${{ github.ref_name }}-${{ github.ref_name }}-node${{ matrix.node }}-win-x64" >> "$GITHUB_ENV"

    # Install all dependencies
    - name: Install dependencies
      run: |
        npm install
        npm install -g pkg

    # Build the project
    - name: Build project
      run: npm run build

    # Build executables for different platforms and archs
    - name: Build executables
      run: |
        pkg -t ${{ env.PKG_TARGET }} --output "${{ env.EXECUTABLE }}" _build/compile.js && chmod +x ${{ env.EXECUTABLE }}

    - uses: actions/upload-artifact@v3
      with:
        name: joelang-artifact-${{ github.ref_name }}-node${{ matrix.node }}-${{ matrix.os }}
        path: ${{ env.EXECUTABLE }}
        if-no-files-found: error

  release:
    needs: build

    runs-on: ubuntu-latest

    steps:

    # Download the artifacts
    - uses: actions/download-artifact@v3

    # Create the release
    - name: Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        draft: false
        prerelease: true
        files: joelang-artifact-${{ github.ref_name }}-node*-*/joelang-${{ github.ref_name }}-node*-*-*
        name: Release ${{ github.ref_name }}
